/// <reference types="node" />
import { Transaction, Connection, PublicKey, ConnectionConfig, Commitment, Signer, VersionedTransaction } from '@solana/web3.js';
import { IWallet } from '../interfaces/IWallet';
import { ConnectionManager } from './ConnectionManager';
/**
 * Represents a wrapper class for a single transaction.
 */
export declare class SingleTransactionWrapper {
    private _transaction;
    private _connections;
    private _shouldAddBlockhash;
    private _shouldAddFeePayer;
    private _shouldSign;
    private _shouldConfirm;
    private constructor();
    create(): SingleTransactionWrapper;
    setTransaction(transaction: Transaction | VersionedTransaction | Buffer): this;
    setConnections(connections: Connection[]): this;
    addConnection(connection: Connection | ConnectionManager | string, config?: ConnectionConfig | Commitment | undefined): this;
    setShouldAddBlockhash(shouldAddBlockhash: boolean): this;
    setShouldAddFeePayer(shouldAddFeePayer: boolean): this;
    setShouldSign(shouldSign: boolean): this;
    setShouldConfirm(shouldConfirm: boolean): this;
    setBlockhash(blockhash: string): this;
    setFeePayer(feePayer: PublicKey): this;
    send({ wallet, signer, signers, confirmationCommitment, blockhashOverride, feePayerOverride, shouldConfirmOverride, shouldRaceSend, skipPreflight }: {
        wallet?: IWallet;
        signer?: Signer;
        signers?: Signer[];
        confirmationCommitment?: Commitment;
        blockhashOverride?: string;
        feePayerOverride?: PublicKey;
        shouldConfirmOverride?: boolean;
        shouldRaceSend?: boolean;
        skipPreflight?: boolean;
    }): Promise<string[]>;
    private sendTransaction;
}
