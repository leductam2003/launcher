"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsbApi = void 0;
const tslib_1 = require("tslib");
const abstract_1 = require("./abstract");
const constants_1 = require("../constants");
const utils_1 = require("@trezor/utils");
const ERRORS = tslib_1.__importStar(require("../errors"));
const INTERFACE_DEVICE_DISCONNECTED = 'The device was disconnected.';
class UsbApi extends abstract_1.AbstractApi {
    constructor({ usbInterface, logger }) {
        super({ logger });
        this.chunkSize = 64;
        this.devices = [];
        this.usbInterface = usbInterface;
        if (!this.usbInterface) {
            return;
        }
        this.usbInterface.onconnect = event => {
            const [_hidDevices, nonHidDevices] = this.filterDevices([event.device]);
            this.devices = [...this.devices, ...this.createDevices(nonHidDevices)];
            this.emit('transport-interface-change', this.devicesToDescriptors());
        };
        this.usbInterface.ondisconnect = event => {
            const { device } = event;
            if (!device.serialNumber) {
                return;
            }
            const index = this.devices.findIndex(d => d.path === device.serialNumber);
            if (index > -1) {
                this.devices.splice(index, 1);
                this.emit('transport-interface-change', this.devicesToDescriptors());
            }
            else {
                this.emit('transport-interface-error', ERRORS.DEVICE_NOT_FOUND);
                this.logger.error('device that should be removed does not exist in state');
            }
        };
    }
    matchDeviceType(device) {
        const isBootloader = device.productId === constants_1.WEBUSB_BOOTLOADER_PRODUCT;
        if (device.deviceVersionMajor === 2) {
            if (isBootloader) {
                return abstract_1.DEVICE_TYPE.TypeT2Boot;
            }
            else {
                return abstract_1.DEVICE_TYPE.TypeT2;
            }
        }
        else {
            if (isBootloader) {
                return abstract_1.DEVICE_TYPE.TypeT1WebusbBoot;
            }
            else {
                return abstract_1.DEVICE_TYPE.TypeT1Webusb;
            }
        }
    }
    devicesToDescriptors() {
        return this.devices.map(d => ({
            path: d.path,
            type: this.matchDeviceType(d.device),
            product: d.device.productId,
        }));
    }
    enumerate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const devices = yield this.usbInterface.getDevices();
                const [hidDevices, nonHidDevices] = this.filterDevices(devices);
                if (hidDevices.length) {
                    this.logger.error('unreadable hid device connected');
                }
                this.devices = this.createDevices(nonHidDevices);
                return this.success(this.devicesToDescriptors());
            }
            catch (err) {
                return this.unknownError(err, []);
            }
        });
    }
    read(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            try {
                const res = yield device.transferIn(constants_1.ENDPOINT_ID, 64);
                if (!res.data) {
                    return this.error({ error: ERRORS.INTERFACE_DATA_TRANSFER });
                }
                return this.success(res.data.buffer);
            }
            catch (err) {
                if (err.message === INTERFACE_DEVICE_DISCONNECTED) {
                    return this.error({ error: ERRORS.DEVICE_DISCONNECTED_DURING_ACTION });
                }
                return this.error({ error: ERRORS.INTERFACE_DATA_TRANSFER, message: err.message });
            }
        });
    }
    write(path, buffer) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            const newArray = new Uint8Array(64);
            newArray.set(new Uint8Array(buffer));
            try {
                const result = yield device.transferOut(constants_1.ENDPOINT_ID, newArray);
                if (result.status !== 'ok') {
                    this.logger.error('transport', 'usbInterface', 'write', 'result.status', result.status);
                    throw new Error('transfer out status not ok');
                }
                return this.success(undefined);
            }
            catch (err) {
                if (err.message === INTERFACE_DEVICE_DISCONNECTED) {
                    return this.error({ error: ERRORS.DEVICE_DISCONNECTED_DURING_ACTION });
                }
                return this.error({ error: ERRORS.INTERFACE_DATA_TRANSFER, message: err.message });
            }
        });
    }
    openDevice(path, first) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < 5; i++) {
                const res = yield this.openInternal(path, first);
                if (res.success) {
                    return res;
                }
                yield (0, utils_1.createTimeoutPromise)(100 * i);
            }
            return this.openInternal(path, first);
        });
    }
    openInternal(path, first) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            try {
                yield device.open();
            }
            catch (err) {
                return this.error({
                    error: ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE,
                    message: err.message,
                });
            }
            if (first) {
                try {
                    yield device.selectConfiguration(constants_1.CONFIGURATION_ID);
                    yield device.reset();
                }
                catch (err) {
                }
            }
            try {
                yield device.claimInterface(constants_1.INTERFACE_ID);
            }
            catch (err) {
                return this.error({
                    error: ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE,
                    message: err.message,
                });
            }
            return this.success(undefined);
        });
    }
    closeDevice(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            if (device.opened) {
                try {
                    const interfaceId = constants_1.INTERFACE_ID;
                    yield device.releaseInterface(interfaceId);
                }
                catch (err) {
                }
            }
            if (device.opened) {
                try {
                    yield device.close();
                }
                catch (err) {
                    return this.error({
                        error: ERRORS.INTERFACE_UNABLE_TO_CLOSE_DEVICE,
                        message: err.message,
                    });
                }
            }
            return this.success(undefined);
        });
    }
    findDevice(path) {
        const device = this.devices.find(d => d.path === path);
        if (!device) {
            return;
        }
        return device.device;
    }
    createDevices(nonHidDevices) {
        let bootloaderId = 0;
        return nonHidDevices.map(device => {
            const { serialNumber } = device;
            let path = serialNumber == null || serialNumber === '' ? 'bootloader' : serialNumber;
            if (path === 'bootloader') {
                bootloaderId++;
                path += bootloaderId;
            }
            return { path, device };
        });
    }
    deviceIsHid(device) {
        return device.vendorId === constants_1.T1_HID_VENDOR;
    }
    filterDevices(devices) {
        const trezorDevices = devices.filter(dev => {
            const isTrezor = constants_1.TREZOR_USB_DESCRIPTORS.some(desc => dev.vendorId === desc.vendorId && dev.productId === desc.productId);
            return isTrezor;
        });
        const hidDevices = trezorDevices.filter(dev => this.deviceIsHid(dev));
        const nonHidDevices = trezorDevices.filter(dev => !this.deviceIsHid(dev));
        return [hidDevices, nonHidDevices];
    }
    dispose() {
        if (this.usbInterface) {
            this.usbInterface.onconnect = null;
            this.usbInterface.ondisconnect = null;
        }
    }
}
exports.UsbApi = UsbApi;
//# sourceMappingURL=usb.js.map